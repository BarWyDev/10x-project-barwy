# PRZYKŁAD: CI/CD z lokalnym Supabase w Dockerze
# Ten plik pokazuje jak uruchomić Supabase lokalnie w GitHub Actions
# UWAGA: To bardziej skomplikowane niż użycie cloud Supabase

name: CI/CD Pipeline (with local Supabase)

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Lint (bez zmian)
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Job 2: Unit Tests (bez zmian - nie potrzebują DB)
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Job 3: E2E Tests z lokalnym Supabase
  test-e2e-local:
    name: E2E Tests (Local Supabase)
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # NOWE: Instalacja Supabase CLI
      - name: Install Supabase CLI
        run: |
          curl -fsSL https://github.com/supabase/cli/releases/download/v1.123.4/supabase_1.123.4_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
          supabase --version

      # NOWE: Uruchomienie lokalnego Supabase
      - name: Start Supabase locally
        run: |
          supabase start
          # Zapisz URL i klucze do environment (dla kolejnych kroków)
          echo "SUPABASE_URL=$(supabase status --output json | jq -r '.API_URL')" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=$(supabase status --output json | jq -r '.ANON_KEY')" >> $GITHUB_ENV
          # Również ustaw PUBLIC_* dla webServer uruchamianego przez Playwright
          echo "PUBLIC_SUPABASE_URL=$(supabase status --output json | jq -r '.API_URL')" >> $GITHUB_ENV
          echo "PUBLIC_SUPABASE_ANON_KEY=$(supabase status --output json | jq -r '.ANON_KEY')" >> $GITHUB_ENV

      # NOWE: Uruchom migracje
      - name: Run migrations
        run: supabase db push

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Testy E2E będą używać lokalnego Supabase
      # Zmienne zostały ustawione w kroku "Start Supabase locally"
      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      # NOWE: Zatrzymaj Supabase
      - name: Stop Supabase
        if: always()
        run: supabase stop

  # Job 4: Build (bez zmian)
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e-local]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build
        env:
          # Dla builda możesz użyć fake values lub cloud instance
          PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'http://localhost:54321' }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'fake-key' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 5: Summary (bez zmian)
  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-e2e-local, build]
    if: always()
    
    steps:
      - name: Check job status
        run: |
          echo "## CI/CD Pipeline Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Unit Tests: ${{ needs.test-unit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 E2E Tests (Local): ${{ needs.test-e2e-local.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint.result }}" == "success" ] && \
             [ "${{ needs.test-unit.result }}" == "success" ] && \
             [ "${{ needs.test-e2e-local.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

