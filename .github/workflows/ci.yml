name: CI/CD Pipeline

# Triggery: manualnie lub po pushu na master
on:
  workflow_dispatch: # Umożliwia manualne uruchomienie z UI GitHub
  push:
    branches:
      - master
      - main

# Zmienne środowiskowe dla całego workflow
env:
  NODE_VERSION: '20' # LTS version

jobs:
  # Job 1: Linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Job 2: Testy jednostkowe (Vitest)
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint # Uruchom tylko jeśli linting przeszedł
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage
        continue-on-error: true # Nie przerywaj jeśli coverage nie osiągnięto

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Job 3: Testy E2E (Playwright)
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    
    # Zmienne środowiskowe dla całego job'a
    # Dzięki temu będą dostępne dla webServer uruchamianego przez Playwright
    # Ustaw je w Settings > Secrets > Actions w GitHub
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always() # Zawsze uploaduj raport, nawet jeśli testy failed
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  # Job 4: Build produkcyjny
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e] # Uruchom tylko jeśli testy przeszły
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build
        env:
          # Zmienne środowiskowe dla builda
          PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 5: Podsumowanie (opcjonalne, ale przydatne)
  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-e2e, build]
    if: always() # Uruchom zawsze, nawet jeśli poprzednie joby failed
    
    steps:
      - name: Check job status
        run: |
          echo "## CI/CD Pipeline Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Unit Tests: ${{ needs.test-unit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 E2E Tests: ${{ needs.test-e2e.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint.result }}" == "success" ] && \
             [ "${{ needs.test-unit.result }}" == "success" ] && \
             [ "${{ needs.test-e2e.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
