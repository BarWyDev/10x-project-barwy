---
/**
 * My Flashcards Page
 * 
 * Displays all user's flashcards with filtering and management options.
 * Supports optional deck filtering via ?deck=<deck_id> URL parameter
 */
import AppLayout from "../../layouts/AppLayout.astro";
import { MyFlashcardsView } from '../../components/dashboard/MyFlashcardsView';
import { FlashcardService } from '../../lib/services/flashcard.service';
import { DeckService } from '../../lib/services/deck.service';

// Get authenticated user from middleware
const user = Astro.locals.user;

// Defense in depth - redirect if no user
if (!user) {
  return Astro.redirect('/login');
}

// For simplified version, use test user
const TEST_USER_ID = '11111111-1111-1111-1111-111111111111';
const userId = TEST_USER_ID;

// Get optional deck filter from URL
const deckId = Astro.url.searchParams.get('deck');

// Fetch deck info if filtering by deck
let selectedDeck = null;
if (deckId) {
  try {
    const deckService = new DeckService(Astro.locals.supabase);
    selectedDeck = await deckService.getDeckById(deckId, userId);
  } catch (e) {
    console.error('Error fetching deck:', e);
    // Invalid deck ID - redirect to all flashcards
    return Astro.redirect('/app');
  }
}

// Fetch flashcards from database
const flashcardService = new FlashcardService(Astro.locals.supabase);
let flashcards = [];
let error = null;

try {
  flashcards = await flashcardService.getAllFlashcards(userId, deckId || undefined);
} catch (e) {
  console.error('Error fetching flashcards:', e);
  error = e instanceof Error ? e.message : 'Failed to load flashcards';
}
---

<AppLayout title="Moje Fiszki - Generator Fiszek">
  <div class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
    <div class="container mx-auto py-8 px-4">
      {error ? (
        <div class="max-w-2xl mx-auto">
          <div class="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
            <p class="text-red-800 font-medium">❌ Błąd ładowania fiszek</p>
            <p class="text-red-600 text-sm mt-1">{error}</p>
          </div>
        </div>
      ) : (
        <MyFlashcardsView 
          flashcards={flashcards} 
          selectedDeckName={selectedDeck?.name}
          client:load 
        />
      )}
    </div>
  </div>
</AppLayout>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .container > * {
    animation: fadeIn 0.6s ease-out;
  }
</style>






